#!/usr/bin/env bash

set -e
set -o pipefail

if [[ -n "$TOKEN" ]]; then
  GITHUB_TOKEN=$TOKEN
fi

if [[ -z "$MERGE_LABEL" ]]; then
  echo "MERGE_LABEL environment variable is not set."
  exit 1
fi

if [[ -z "$GITHUB_TOKEN" ]]; then
  echo "GITHUB_TOKEN environment variable is not set."
  exit 1
fi

URI=https://api.github.com
API_VERSION=v3
API_HEADER="Accept: application/vnd.github.${API_VERSION}+json"
AUTH_HEADER="Authorization: token ${GITHUB_TOKEN}"

# NOTE: https://developer.github.com/actions/creating-github-actions/accessing-the-runtime-environment/#exit-codes-and-statuses
NEUTRAL_EXIT_CODE=0

merge() {
  number="$1"
  sha="$2"

  result=$(
    jq --raw-output \
      --arg key0 "sha" --arg value0 "$sha" \
      --arg key1 "merge_method" --arg value1 "squash" \
      '. | .[$key0]=$value0|.[$key1]=$value1' <<< "{}" | curl -XPUT -fsSL \
        -H "${AUTH_HEADER}" \
        -H "${API_HEADER}" \
        -d @- \
        "${URI}/repos/${GITHUB_REPOSITORY}/pulls/${number}/merge"
  )

  merged=$(echo "$result" | jq --raw-output .merged)
  message=$(echo "$result" | jq --raw-output .message)

  echo "$message"

  if [[ "$merged" == "false" ]]; then
    echo "Failed to merge pull request #$number"
    echo 1
  fi
}

get_pull_requests() {
  local pulls
  pulls=$(
    curl -XGET -fsSL \
      -H "${AUTH_HEADER}" \
      -H "${API_HEADER}" \
      "${URI}/repos/${GITHUB_REPOSITORY}/pulls?state=open"
  )

  echo "$pulls"
}

main() {
  pulls=$(get_pull_requests)

  echo "Found $(echo "$pulls" | jq '. | length') pull requests."

  if [[ $(echo "$pulls" | jq '. | length') -lt 1 ]]; then
    echo "Could not find any open pull requests."
    exit "$NEUTRAL_EXIT_CODE"
  fi

  numpulls=$(echo "$pulls" | jq '. | length')
  ctr=0

  while [ "$ctr" -lt "$numpulls" ]; do
    pull=$(echo "$pulls" | jq --raw-output ".[$ctr]")
    number=$(echo "$pull" | jq --raw-output .number)

    echo "Check whether pull request #$number can be merged..."

    if [[ ! $(echo "$pull" | jq -r --arg label2 "$MERGE_LABEL" '.labels[] | select(.name == $label2 ) .name') == "$MERGE_LABEL" ]]; then
      echo "Not merging pull request #${number}, because it is not labeled '$MERGE_LABEL'."

      ctr=$((ctr+1))
      continue
    fi

    local reviews
    reviews=$(
      curl -XGET -fsSL \
        -H "${AUTH_HEADER}" \
        -H "${API_HEADER}" \
        "${URI}/repos/${GITHUB_REPOSITORY}/pulls/${number}/reviews"
    )
    local numreviews
    numreviews=$(echo "$reviews" | jq '. | length')

    declare -A approvals
    local j=0
    while [ "$j" -lt "$numreviews" ]; do
      review=$(echo "$reviews" | jq --raw-output ".[$j]")
      user=$(echo "$review" | jq --raw-output ".user.login")
      state=$(echo "$review" | jq --raw-output ".state")

      if [[ "$state" == "APPROVED" ]]; then
        approvals[$user]=true
      elif [[ "$state" == "CHANGES_REQUESTED" ]]; then
        approvals[$user]=false
      fi

      j=$((j+1))
    done

    if [[ "${#approvals[@]}" -lt 1 ]]; then
      echo "Could not find any reviews approving pull request #${number}."
      ctr=$((ctr+1))
      continue
    fi

    for user in "${!approvals[@]}"; do
      if [[ ! "${approvals[$user]}" = true ]]; then
        echo "Not merging pull request #${number}, because @${user} requested changes."
        ctr=$((ctr+1))
        continue
      fi
    done

    echo "Merging pull request #${number}..."

    sha=$(echo "$pull" | jq --raw-output .head.sha)
    merge "$number" "$sha"

    ctr=$((ctr+1))
  done


  exit 0
}

main "$@"
